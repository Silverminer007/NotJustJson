buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id "org.cadixdev.licenser" version "0.6.+"
}

apply plugin: 'org.spongepowered.mixin'

version = '19.0.0.0.0'
group = 'com.ygdevs.notjustjson' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'notjustjson'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

license {
    header = project.file('HEADER.txt')
    properties {
        name = 'Silverminer007'
        year = 2022
    }
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.2'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'notjustjson'

            mods {
                notjustjson {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'notjustjson'

            mods {
                notjustjson {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'notjustjson'

            mods {
                notjustjson {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'notjustjson', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                notjustjson {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.0.8'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    library ('com.moandjiezana.toml:toml4j:0.7.2') {
        exclude group: 'com.google.code.gson', module: 'gson'
    }
    library 'org.yaml:snakeyaml:1.30'
    library 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.3'
}

mixin {
    add sourceSets.main, 'mixins.notjustjson.refmap.json'
    config 'mixins.notjustjson.json'
    debug.export = true
    debug.verbose = true
}

jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title"     : "notjustjson",
                "Specification-Vendor"    : "notjustjsonsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "notjustjsonsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.library]
    relocate 'com.moandjiezana.toml', "${project.group}.relocated.toml4j"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
